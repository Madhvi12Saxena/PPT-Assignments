Q.5 What is the significance of using "setState" instead of modifying state directly in React?

Ans:-The significance of using setState instead of directly modifying state in React lies in how React manages and 
updates components, as well as ensuring predictable and correct behavior in your application. By using setState, 
you adhere to React's principles and leverage its state management system effectively.

Here are the key reasons why using setState is essential:

Triggering Re-renders: When you modify the state directly, React doesn't detect the change, and it doesn't know that 
the component needs to be re-rendered with the updated state. On the other hand, when you use setState, React is aware 
of the state change, and it triggers a re-render of the component to reflect the updated state in the UI.

Asynchronous Updates: setState batches state updates for better performance. React may perform multiple setState calls 
together to optimize rendering. If you modify the state directly, these batched updates may not occur as expected, 
leading to incorrect rendering and potential race conditions.

State Merging: When you use setState, React intelligently merges your state updates with the existing state. If you 
modify the state directly, you might overwrite some properties unintentionally, leading to unexpected results.

Immutable Data: React follows the principle of immutability. When using setState, you provide a new state object, 
rather than modifying the existing state object. This helps in maintaining a history of state changes and makes it 
easier to reason about the state at different points in time.

Avoiding Side Effects: Directly modifying the state may lead to side effects and make it difficult to track changes 
in your application. By using setState, you ensure that state updates are handled in a controlled and predictable manner.